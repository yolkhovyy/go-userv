---
services:
  user-rest:
    image: yolkhovyy/user-rest:${USER_VERSION:?must be set in .env}
    stop_signal: SIGINT
    depends_on:
      otel-collector:
        condition: service_started
      postgres:
        condition: service_started
      kafka-initializer:
        condition: service_completed_successfully
    ports:
      - 8080:${USER_HTTP_PORT:-8080}
    build:
      context: .
      dockerfile: cmd/user-rest/Dockerfile
      target: ${BUILD_TARGET:-release}
    environment:
      - USER_HTTP_PORT
      - USER_HTTP_SHUTDOWNTIMEOUT
      - USER_HTTP_READHEADERTIMEOUT
      - USER_ROUTER_MODE
      - USER_POSTGRES_HOST
      - USER_POSTGRES_PORT
      - USER_POSTGRES_DATABASE
      - USER_POSTGRES_USERNAME
      - USER_POSTGRES_PASSWORD
      - USER_LOGGER_ENABLE
      - USER_LOGGER_COLLECTOR_PROTOCOL
      - USER_LOGGER_COLLECTOR_CONNECTION
      - USER_TRACER_ENABLE
      - USER_TRACER_COLLECTOR_PROTOCOL
      - USER_TRACER_COLLECTOR_CONNECTION
      - USER_METRIC_ENABLE
      - USER_METRIC_PROMETHEUS
      - USER_METRIC_INTERVAL
      - USER_METRIC_COLLECTOR_PROTOCOL
      - USER_METRIC_COLLECTOR_CONNECTION

  user-graphql:
    image: yolkhovyy/user-graphql:${USER_VERSION:?must be set in .env}
    stop_signal: SIGINT
    depends_on:
      postgres:
        condition: service_started
      kafka-initializer:
        condition: service_completed_successfully
    ports:
      - 8081:${USER_HTTP_PORT:-8080}
    build:
      context: .
      dockerfile: cmd/user-graphql/Dockerfile
      target: ${BUILD_TARGET:-release}
    environment:
      - USER_HTTP_PORT
      - USER_HTTP_SHUTDOWNTIMEOUT
      - USER_HTTP_READHEADERTIMEOUT
      - USER_ROUTER_MODE
      - USER_POSTGRES_HOST
      - USER_POSTGRES_PORT
      - USER_POSTGRES_DATABASE
      - USER_POSTGRES_USERNAME
      - USER_POSTGRES_PASSWORD
      - USER_LOGGER_ENABLE
      - USER_LOGGER_COLLECTOR_PROTOCOL
      - USER_LOGGER_COLLECTOR_CONNECTION
      - USER_TRACER_ENABLE
      - USER_TRACER_COLLECTOR_PROTOCOL
      - USER_TRACER_COLLECTOR_CONNECTION
      - USER_METRIC_ENABLE
      - USER_METRIC_PROMETHEUS
      - USER_METRIC_INTERVAL
      - USER_METRIC_COLLECTOR_PROTOCOL
      - USER_METRIC_COLLECTOR_CONNECTION

  user-grpc:
    image: yolkhovyy/user-grpc:${USER_VERSION:?must be set in .env}
    stop_signal: SIGINT
    depends_on:
      postgres:
        condition: service_started
      kafka-initializer:
        condition: service_completed_successfully
    ports:
      - 50051:${USER_GRPC_PORT:-50051}
    build:
      context: .
      dockerfile: cmd/user-grpc/Dockerfile
      target: ${BUILD_TARGET:-release}
    environment:
      - USER_GRPC_PORT
      - USER_GRPC_REFLECTION
      - USER_ROUTER_MODE
      - USER_POSTGRES_HOST
      - USER_POSTGRES_PORT
      - USER_POSTGRES_DATABASE
      - USER_POSTGRES_USERNAME
      - USER_POSTGRES_PASSWORD
      - USER_LOGGER_ENABLE
      - USER_LOGGER_COLLECTOR_PROTOCOL
      - USER_LOGGER_COLLECTOR_CONNECTION
      - USER_TRACER_ENABLE
      - USER_TRACER_COLLECTOR_PROTOCOL
      - USER_TRACER_COLLECTOR_CONNECTION
      - USER_METRIC_ENABLE
      - USER_METRIC_PROMETHEUS
      - USER_METRIC_INTERVAL
      - USER_METRIC_COLLECTOR_PROTOCOL
      - USER_METRIC_COLLECTOR_CONNECTION

  user-notifier:
    image: yolkhovyy/user-notifier:${USER_VERSION:?must be set in .env}
    stop_signal: SIGINT
    depends_on:
      postgres:
        condition: service_started
      kafka-initializer:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: cmd/user-notifier/Dockerfile
      target: ${BUILD_TARGET:-release}
    environment:
      - USER_POSTGRES_HOST
      - USER_POSTGRES_PORT
      - USER_POSTGRES_DATABASE
      - USER_POSTGRES_USERNAME
      - USER_POSTGRES_PASSWORD
      - USER_KAFKA_BROKERS
      - USER_LOGGER_ENABLE
      - USER_LOGGER_COLLECTOR_PROTOCOL
      - USER_LOGGER_COLLECTOR_CONNECTION
      - USER_TRACER_ENABLE
      - USER_TRACER_COLLECTOR_PROTOCOL
      - USER_TRACER_COLLECTOR_CONNECTION
      - USER_METRIC_ENABLE
      - USER_METRIC_PROMETHEUS
      - USER_METRIC_INTERVAL
      - USER_METRIC_COLLECTOR_PROTOCOL
      - USER_METRIC_COLLECTOR_CONNECTION

  postgres:
    image: postgres:15.2
    ports:
      - ${USER_POSTGRES_PORT:-5432}:5432
    environment:
      POSTGRES_USER: ${USER_POSTGRES_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - user-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 1g
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${USER_KAFKA_BROKERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-initializer:
    image: confluentinc/cp-kafka:7.5.2
    depends_on:
      kafka:
        condition: service_started
    command: "bash -c 'kafka-topics \
              --create \
              --topic postgres.public.users \
              --partitions 3 \
              --replication-factor 1 \
              --if-not-exists \
              --bootstrap-server kafka:9092'"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    restart: unless-stopped
    ports:
      - 14317:4317   # Used by integration test
    volumes:
      - ./config/otel-collector/${OTEL_COLLECTOR_CONFIG:-config-grafana-loki-tempo.yml}:/etc/otel-collector-config.yml
    environment:
      - NEWRELIC_ENDPOINT
      - NEWRELIC_API_KEY

volumes:
  user-data:
